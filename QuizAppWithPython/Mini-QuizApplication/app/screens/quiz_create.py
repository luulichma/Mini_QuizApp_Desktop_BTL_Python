from kivy.uix.screenmanager import Screen
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.textinput import TextInput
from kivy.uix.togglebutton import ToggleButton
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.popup import Popup
from app.services import quiz_services


class QuizCreateScreen(Screen):
    def on_enter(self):
        container = self.ids.question_container
        if not container.children:
            self.add_question_block()

    def add_question_block(self):
        """T·∫°o m·ªôt kh·ªëi c√¢u h·ªèi g·ªìm TextInput + danh s√°ch ƒë√°p √°n"""
        container = self.ids.question_container

        question_box = BoxLayout(orientation="vertical", size_hint_y=None, height=300, spacing=10)
        question_box.question_index = len(container.children) + 1
        question_box.radio_group = f"group_{question_box.question_index}"

        # Ti√™u ƒë·ªÅ c√¢u h·ªèi
        q_input = TextInput(
            hint_text=f"C√¢u h·ªèi {question_box.question_index}",
            size_hint_y=None,
            height=60,
            background_color=(1, 1, 1, 0.25),
            foreground_color=(1, 1, 1, 1),
            font_size=16,
            padding=[10, 8],
        )
        question_box.add_widget(q_input)

        # Danh s√°ch ƒë√°p √°n
        options_box = BoxLayout(orientation="vertical", spacing=5, size_hint_y=None, height=200)
        question_box.add_widget(options_box)

        # Th√™m 2 ƒë√°p √°n m·∫∑c ƒë·ªãnh
        for _ in range(2):
            self._add_option_field(options_box, question_box.radio_group)

        # H√†ng n√∫t ‚ÄúTh√™m/X√≥a ƒë√°p √°n‚Äù
        control_box = BoxLayout(size_hint_y=None, height=40, spacing=10)
        add_btn = Button(text="‚ûï Th√™m ƒë√°p √°n", background_color=(1, 1, 1, 0.2), color=(1, 1, 1, 1))
        remove_btn = Button(text="üóëÔ∏è X√≥a ƒë√°p √°n cu·ªëi", background_color=(1, 1, 1, 0.2), color=(1, 1, 1, 1))
        add_btn.bind(on_release=lambda *_: self._add_option_field(options_box, question_box.radio_group))
        remove_btn.bind(on_release=lambda *_: self._remove_option_field(options_box))
        control_box.add_widget(add_btn)
        control_box.add_widget(remove_btn)
        question_box.add_widget(control_box)

        container.add_widget(question_box)

    def _add_option_field(self, parent_box, radio_group):
        line = BoxLayout(orientation="horizontal", size_hint_y=None, height=40, spacing=10)
        rb = ToggleButton(group=radio_group, size_hint_x=0.15, text="", allow_no_selection=False)
        txt = TextInput(
            hint_text=f"ƒê√°p √°n {len(parent_box.children) + 1}",
            size_hint_x=0.85,
            background_color=(1, 1, 1, 0.25),
            foreground_color=(1, 1, 1, 1),
            font_size=16,
        )
        line.add_widget(rb)
        line.add_widget(txt)
        parent_box.add_widget(line)

    def _remove_option_field(self, parent_box):
        if parent_box.children:
            parent_box.remove_widget(parent_box.children[0])

    def save_quiz(self):
        quiz_name = self.ids.quiz_name.text.strip()
        if not quiz_name:
            self._popup("L·ªói", "Vui l√≤ng nh·∫≠p t√™n Quiz!")
            return

        container = self.ids.question_container
        if not container.children:
            self._popup("L·ªói", "Quiz c·∫ßn √≠t nh·∫•t 1 c√¢u h·ªèi!")
            return

        # T·∫°o quiz
        quiz_id = quiz_services.create_quiz(
            user_id="000000000000000000000000", title=quiz_name, description=""
        )

        # Duy·ªát t·ª´ng c√¢u h·ªèi
        for q_box in reversed(container.children):
            q_input = q_box.children[-3]  # TextInput ƒë·∫ßu ti√™n
            q_text = q_input.text.strip()
            if not q_text:
                continue

            options_box = q_box.children[-2]
            options = []
            correct_answer = None

            for line in reversed(options_box.children):
                rb, txt = line.children
                val = txt.text.strip()
                if val:
                    if val in options:
                        self._popup("L·ªói", f"ƒê√°p √°n b·ªã tr√πng trong c√¢u h·ªèi: {q_text}")
                        return
                    options.append(val)
                    if rb.state == "down":
                        correct_answer = val

            if not correct_answer:
                self._popup("L·ªói", f"C√¢u h·ªèi '{q_text}' ch∆∞a ch·ªçn ƒë√°p √°n ƒë√∫ng!")
                return

            quiz_services.add_question(quiz_id, q_text, correct_answer, [{"text": o, "display_order": i+1} for i, o in enumerate(options)])

        self._popup("Th√†nh c√¥ng", f"Quiz '{quiz_name}' ƒë√£ ƒë∆∞·ª£c t·∫°o v·ªõi {len(container.children)} c√¢u h·ªèi!")
        self.clear_inputs()

    def clear_inputs(self):
        self.ids.quiz_name.text = ""
        self.ids.question_container.clear_widgets()
        self.add_question_block()

    def _popup(self, title, msg):
        Popup(title=title, content=Label(text=msg, font_size=16), size_hint=(0.6, 0.35)).open()

    def go_back(self):
        self.manager.current = "teacher_home"
